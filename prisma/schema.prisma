// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// the configuration file for your prisma and it is used to define your data models, database connections, and other settings 

generator client {
  provider = "prisma-client-js"
}

// specfify the db the url which connects to the database and relationmode means prisma will manage the relationships between tables/entities
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// After all the configuration you can start configuring all the Models you will use in your database (Users/Items/Objects)
model Store {
  // this defines a data that will be a string and will be a type id and it will have a default of a uuid that is generated by prisma if no value is given to it 
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[] @relation("StoreToCategory")
  sizes           Size[]  @relation("StoreToSize")
  colors          Color[]  @relation("StoreToColor")
  products        Product[] @relation("StoreToProduct")
  // this data defines a created at and updated at and uses the DateTime data types, it will also be given the attributes 
  // default(now()) to get the current moment it was created at and updatedAt attribute which updates the value with the current timestamp when  the table is updated
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Billboard {
  // this defines a data that will be a string and will be a type id and it will have a default of a uuid that is generated by prisma if no value is given to it 
  id          String @id @default(uuid())
  storeId     String 
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String 
  imageUrl    String 
  categories Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([storeId])
}

model Category {
  id          String   @id @default(uuid())
  storeId     String 
  store       Store    @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard  @relation( fields: [billboardId], references: [id])
  products    Product[]  @relation("CategoryToProduct")
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String   @id @default(uuid())
  storeId     String 
  store       Store    @relation("StoreToSize", fields: [storeId], references: [id])
  products    Product[]   
  name        String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id          String    @id @default(uuid())
  storeId     String 
  store       Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products    Product[]   
  name        String
  value       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id          String   @id @default(uuid())
  storeId     String 
  store       Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  sizeId      String 
  size        Size     @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color    @relation(fields: [colorId], references: [id])
  images      Image[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}